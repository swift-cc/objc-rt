--- /Users/justin/Desktop/original/objc-msg-arm.s	2014-09-30 13:17:57.000000000 -0700
+++ objc/runtime/Messengers.subproj/objc-msg-arm.s	2014-09-30 13:21:28.000000000 -0700
@@ -26,115 +26,37 @@
  *
  ********************************************************************/
 
-#ifdef __arm__
-	
-#include <arm/arch.h>
-
-#ifdef ARM11
-#define MOVE cpy
-#define MOVEEQ cpyeq
-#define MOVENE cpyne
-#else
-#define MOVE mov
-#define MOVEEQ moveq
-#define MOVENE movne
-#endif
-
-#ifdef _ARM_ARCH_7
-#define THUMB 1
-#endif
-
 .syntax unified	
 	
-#if defined(__DYNAMIC__)
-#define MI_EXTERN(var) \
-	.non_lazy_symbol_pointer                        ;\
-L ## var ## __non_lazy_ptr:                         ;\
-	.indirect_symbol var                            ;\
-	.long 0
-#else
-#define MI_EXTERN(var) \
-	.globl var
-#endif
-
-
-#if defined(__DYNAMIC__) && defined(THUMB)
-#define MI_GET_ADDRESS(reg,var)  \
-	ldr     reg, 4f                                 ;\
-3:	add	reg, pc                                     ;\
-	ldr	reg, [reg]                                  ;\
-	b	5f                                          ;\
-	.align 2 ;\
-4:	.long   L ## var ## __non_lazy_ptr - (3b + 4)	;\
-5:
-#elif defined(__DYNAMIC__)	
-#define MI_GET_ADDRESS(reg,var)  \
-	ldr     reg, 4f                                 ;\
-3:	ldr     reg, [pc, reg]                          ;\
-	b       5f                                      ;\
-	.align 2 ;\
-4:	.long   L ## var ## __non_lazy_ptr - (3b + 8)   ;\
-5:
-#else	
-#define MI_GET_ADDRESS(reg,var)  \
-	ldr     reg, 3f ;\
-	b       4f      ;\
-	.align 2 ;\
-3:	.long var       ;\
+.macro MI_EXTERN var
+	.globl \var
+.endm
+
+.macro MI_GET_ADDRESS reg, var
+	ldr     \reg, 3f
+	b       4f
+	.align 2
+3:	.long var
 4:
-#endif
+.endm
 
 
-#if defined(__DYNAMIC__)
-#define MI_BRANCH_EXTERNAL(var)  \
-	MI_GET_ADDRESS(ip, var)                         ;\
-	bx      ip
-#else
-#define MI_BRANCH_EXTERNAL(var)                     \
-	b       var
-#endif
-
-#if defined(__DYNAMIC__) && defined(THUMB)
-#define MI_CALL_EXTERNAL(var)    \
-	MI_GET_ADDRESS(ip,var)  ;\
-	blx     ip
-#elif defined(__DYNAMIC__)
-#define MI_CALL_EXTERNAL(var)    \
-	MI_GET_ADDRESS(ip,var)  ;\
-	MOVE    lr, pc          ;\
-	bx      ip
-#else
-#define MI_CALL_EXTERNAL(var)  \
-	bl      var
-#endif
-
-
-MI_EXTERN(__class_lookupMethodAndLoadCache3)
-MI_EXTERN(_FwdSel)
-MI_EXTERN(___objc_error)
-MI_EXTERN(__objc_forward_handler)
-MI_EXTERN(__objc_forward_stret_handler)
-
-#if 0
-// Special section containing a function pointer that dyld will call
-// when it loads new images.
-MI_EXTERN(__objc_notify_images)
-.text
-.align 2
-L__objc_notify_images:
-	MI_BRANCH_EXTERNAL(__objc_notify_images)
-
-.section __DATA,__image_notify
-.long L__objc_notify_images
-#endif
+.macro MI_CALL_EXTERNAL var
+	bl      \var
+.endm
+
 
+MI_EXTERN _class_lookupMethodAndLoadCache3
+MI_EXTERN _FwdSel
+MI_EXTERN __objc_error
+MI_EXTERN _objc_forward_handler
+MI_EXTERN _objc_forward_stret_handler
 
 # _objc_entryPoints and _objc_exitPoints are used by method dispatch
 # caching code to figure out whether any threads are actively 
 # in the cache for dispatching.  The labels surround the asm code
 # that do cache lookups.  The tables are zero-terminated.
 .data
-.private_extern _objc_entryPoints
 _objc_entryPoints:
 	.long   __cache_getImp
 	.long   __cache_getMethod
@@ -148,7 +70,6 @@
 	.long   0
 
 .data
-.private_extern _objc_exitPoints
 _objc_exitPoints:
 	.long   LGetImpExit
 	.long   LGetMethodExit
@@ -192,31 +113,19 @@
 # Takes: functionName - name of the exported function
 #####################################################################
 
-.macro ENTRY /* name */
+.macro ENTRY name
 	.text
-#ifdef THUMB
-	.thumb
-#endif
 	.align 5
-	.globl    _$0
-#ifdef THUMB
-	.thumb_func
-#endif
-_$0:	
-.endmacro
+	.globl _\name
+_\name:	
+.endm
 
-.macro STATIC_ENTRY /*name*/
+.macro STATIC_ENTRY name
 	.text
-#ifdef THUMB
-	.thumb
-#endif
 	.align 5
-	.private_extern _$0
-#ifdef THUMB
-	.thumb_func
-#endif
-_$0:	
-.endmacro
+	.globl _\name
+_\name:	
+.endm
 	
 	
 #####################################################################
@@ -229,8 +138,8 @@
 # Takes: functionName - name of the exported function
 #####################################################################
 
-.macro END_ENTRY /* name */
-.endmacro
+.macro END_ENTRY name
+.endm
 
 
 #####################################################################
@@ -252,31 +161,31 @@
 #
 #####################################################################
 
-.macro CacheLookup /* selReg, classReg, missLabel */
+.macro CacheLookup selReg, classReg, missLabel
 	
-	MOVE	r9, $0, LSR #2          /* index = (sel >> 2) */
-	ldr     a4, [$1, #CACHE]        /* cache = class->cache */
+	mov     r9, \selReg, LSR #2          /* index = (sel >> 2) */
+	ldr     a4, [\classReg, #CACHE]        /* cache = class->cache */
 	add     a4, a4, #BUCKETS        /* buckets = &cache->buckets */
 
 /* search the cache */
-/* a1=receiver, a2 or a3=sel, r9=index, a4=buckets, $1=method */
+/* a1=receiver, a2 or a3=sel, r9=index, a4=buckets, classReg=method */
 1:
 	ldr     ip, [a4, #NEGMASK]      /* mask = cache->mask */
 	and     r9, r9, ip              /* index &= mask           */
-	ldr     $1, [a4, r9, LSL #2]    /* method = buckets[index] */
-	teq     $1, #0                  /* if (method == NULL)     */
+	ldr     \classReg, [a4, r9, LSL #2]    /* method = buckets[index] */
+	teq     \classReg, #0                  /* if (method == NULL)     */
 	add     r9, r9, #1              /* index++                 */
-	beq     $2                      /*     goto cacheMissLabel */
+	beq     \missLabel                      /*     goto cacheMissLabel */
 
-	ldr     ip, [$1, #METHOD_NAME]  /* load method->method_name        */
-	teq     $0, ip                  /* if (method->method_name != sel) */
+	ldr     ip, [\classReg, #METHOD_NAME]  /* load method->method_name        */
+	teq     \selReg, ip                  /* if (method->method_name != sel) */
 	bne     1b                      /*     retry                       */
 
-/* cache hit, $1 == method triplet address */
-/* Return triplet in $1 and imp in ip      */
-	ldr     ip, [$1, #METHOD_IMP]   /* imp = method->method_imp */
+/* cache hit, classReg == method triplet address */
+/* Return triplet in classReg and imp in ip      */
+	ldr     ip, [\classReg, #METHOD_IMP]   /* imp = method->method_imp */
 
-.endmacro
+.endm
 
 
 /********************************************************************
@@ -294,7 +203,7 @@
  * safety and memory management bugs in _class_lookupMethodAndLoadCache. 
  * See _class_lookupMethodAndLoadCache for details.
  *
- * _objc_msgForward_internal is passed as a parameter because it's more 
+ * _objc_msgForward_internal is passed as a parameter because it is more 
  * efficient to do the (PIC) lookup once in the caller than repeatedly here.
  ********************************************************************/
 
@@ -306,12 +215,12 @@
 # cache hit, method triplet in a1 and imp in ip
 	teq     ip, a3          /* check for _objc_msgForward_internal */
 	it	eq
-	MOVEEQ  a1, #1          /* return (Method)1 if forward */
+	moveq  a1, #1          /* return (Method)1 if forward */
 	                        /* else return triplet (already in a1) */
 	bx	lr
 	
 LGetMethodMiss:
-	MOVE    a1, #0          /* return nil if cache miss */
+	mov    a1, #0          /* return nil if cache miss */
 	bx	lr
 
 LGetMethodExit: 
@@ -336,11 +245,11 @@
 	CacheLookup a2, a1, LGetImpMiss
 
 # cache hit, method triplet in a1 and imp in ip
-	MOVE    a1, ip          @ return imp
+	mov    a1, ip          @ return imp
 	bx	lr
 	
 LGetImpMiss:
-	MOVE    a1, #0          @ return nil if cache miss
+	mov    a1, #0          @ return nil if cache miss
 	bx	lr
 
 LGetImpExit: 
@@ -397,8 +306,8 @@
 					/* receiver already in a1 */
 
 # Do the lookup
-	MI_CALL_EXTERNAL(__class_lookupMethodAndLoadCache3)
-	MOVE    ip, a1
+	MI_CALL_EXTERNAL(_class_lookupMethodAndLoadCache3)
+	mov    ip, a1
 
 # Prep for forwarding, Pop stack frame and call imp
 	teq	v1, v1		/* set nonstret (eq) */
@@ -482,13 +391,13 @@
 	add     r7, sp, #16
 
 # Load class and selector
-	MOVE	a1, a2			/* receiver */
-	MOVE	a2, a3			/* selector */
+	mov	a1, a2			/* receiver */
+	mov	a2, a3			/* selector */
 	ldr	a3, [a1, #ISA]		/* class = receiver->isa */
 
 # Do the lookup
-	MI_CALL_EXTERNAL(__class_lookupMethodAndLoadCache3)
-	MOVE    ip, a1
+	MI_CALL_EXTERNAL(_class_lookupMethodAndLoadCache3)
+	mov    ip, a1
 
 # Prep for forwarding, pop stack frame and call imp
 	tst	a1, a1		/* set stret (ne); a1 is nonzero (imp) */
@@ -543,8 +452,8 @@
 	ldr     a1, [a1, #RECEIVER]	/* receiver = super->receiver */
 
 # Do the lookup
-	MI_CALL_EXTERNAL(__class_lookupMethodAndLoadCache3)
-	MOVE    ip, a1
+	MI_CALL_EXTERNAL(_class_lookupMethodAndLoadCache3)
+	mov    ip, a1
 
 # Prep for forwarding, pop stack frame and call imp
 	teq	v1, v1			/* set nonstret (eq) */
@@ -594,8 +503,8 @@
 	ldr     a1, [a1, #RECEIVER]	/* receiver = super->receiver */
 
 # Do the lookup
-	MI_CALL_EXTERNAL(__class_lookupMethodAndLoadCache3)
-	MOVE    ip, a1
+	MI_CALL_EXTERNAL(_class_lookupMethodAndLoadCache3)
+	mov    ip, a1
 
 # Prep for forwarding, pop stack frame and call imp
 	teq	v1, v1			/* set nonstret (eq) */
@@ -655,14 +564,14 @@
 	add     r7, sp, #16
 
 # Load class and selector
-	MOVE	a1, a2			/* struct super */
-	MOVE	a2, a3			/* selector */
+	mov	a1, a2			/* struct super */
+	mov	a2, a3			/* selector */
 	ldr	a3, [a1, #CLASS]	/* class = super->class  */
 	ldr     a1, [a1, #RECEIVER]	/* receiver = super->receiver */
 
 # Do the lookup
-	MI_CALL_EXTERNAL(__class_lookupMethodAndLoadCache3)
-	MOVE    ip, a1
+	MI_CALL_EXTERNAL(_class_lookupMethodAndLoadCache3)
+	mov    ip, a1
 
 # Prep for forwarding, pop stack frame and call imp
 	tst     v1, v1		/* set stret (ne); v1 is nonzero (triplet) */
@@ -708,15 +617,15 @@
 	add     r7, sp, #16
 
 # Load class and selector
-	MOVE	a1, a2			/* struct super */
-	MOVE	a2, a3			/* selector */
+	mov	a1, a2			/* struct super */
+	mov	a2, a3			/* selector */
 	ldr	a3, [a1, #CLASS]	/* class = super->class  */
 	ldr     a3, [a3, #SUPERCLASS]   /* class = class->superclass */
 	ldr     a1, [a1, #RECEIVER]	/* receiver = super->receiver */
 
 # Do the lookup
-	MI_CALL_EXTERNAL(__class_lookupMethodAndLoadCache3)
-	MOVE    ip, a1
+	MI_CALL_EXTERNAL(_class_lookupMethodAndLoadCache3)
+	mov    ip, a1
 
 # Prep for forwarding, pop stack frame and call imp
 	tst     v1, v1		/* set stret (ne); v1 is nonzero (triplet) */
@@ -740,7 +649,7 @@
  *
  *      - forward:(SEL)sel :(marg_list)args;
  * 
- * The marg_list's layout is:
+ * The marg_list layout is:
  * d0   <-- args
  * d1
  * d2   |  increasing address
@@ -763,15 +672,12 @@
  ********************************************************************/
 
 .data
-.private_extern _FwdSel
 _FwdSel:
 	.long 0
 
-.private_extern __objc_forward_handler
 __objc_forward_handler:
 	.long 0
 
-.private_extern __objc_forward_stret_handler
 __objc_forward_stret_handler:
 	.long 0
 
@@ -792,7 +698,7 @@
 	// Non-stret version
 
 # check for user-installed forwarding handler
-	MI_GET_ADDRESS(ip, __objc_forward_handler)
+	MI_GET_ADDRESS ip, __objc_forward_handler
 	ldr	ip, [ip]
 	teq	ip, #0
 	it	ne
@@ -803,10 +709,10 @@
 
 # build forward::'s parameter list  (self, forward::, original sel, marg_list)
 	# a1 already is self
-	MOVE    a3, a2                   @ original sel
-	MI_GET_ADDRESS(a2, _FwdSel)  @ "forward::"
+	mov    a3, a2                   @ original sel
+	MI_GET_ADDRESS a2, _FwdSel  @ "forward::"
 	ldr	a2, [a2]
-	MOVE    a4, sp                   @ marg_list
+	mov    a4, sp                   @ marg_list
 
 # check for forwarding of forward:: itself
 	teq     a2, a3
@@ -830,7 +736,7 @@
 	// Struct-return version
 
 # check for user-installed forwarding handler
-	MI_GET_ADDRESS(ip, __objc_forward_stret_handler)
+	MI_GET_ADDRESS ip, __objc_forward_stret_handler 
 	ldr	ip, [ip]
 	teq	ip, #0
 	it	ne
@@ -840,11 +746,11 @@
 	stmfd   sp!, {a1-a4}             @ push args to marg_list
 
 # build forward::'s parameter list  (self, forward::, original sel, marg_list)
-	MOVE    a1, a2                   @ self
-	MI_GET_ADDRESS(a2, _FwdSel) @ "forward::"
+	mov    a1, a2                   @ self
+	MI_GET_ADDRESS a2, _FwdSel @ "forward::"
 	ldr	a2, [a2]
 	# a3 is already original sel
-	MOVE    a4, sp                   @ marg_list
+	mov    a4, sp                   @ marg_list
 
 # check for forwarding of forward:: itself
 	teq     a2, a3
@@ -867,7 +773,7 @@
 	# currently a1=self, a2=forward::, a3 = original sel, a4 = marg_list
 	# call __objc_error(self, format, original sel)
 	add     a2, pc, #4     @ pc bias is 8 bytes
-	MI_CALL_EXTERNAL(___objc_error)
+	MI_CALL_EXTERNAL __objc_error
 	.ascii "Does not recognize selector %s\0"
 
 
@@ -911,4 +817,3 @@
 
 	END_ENTRY _objc_ignored_method
 	
-#endif
